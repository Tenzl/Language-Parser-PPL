# Generated from py2java.g4 by ANTLR 4.9.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2-")
        buf.write("\u0145\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\3\2\3\2\3")
        buf.write("\3\3\3\3\4\3\4\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\7\3\7\3\b")
        buf.write("\3\b\3\t\3\t\3\t\3\n\3\n\3\n\3\13\3\13\3\13\3\f\3\f\3")
        buf.write("\f\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3\21\3\21\3\21")
        buf.write("\3\21\3\22\3\22\3\22\3\23\3\23\3\23\3\24\3\24\3\24\3\25")
        buf.write("\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\7\26\u0099\n\26\f\26\16\26\u009c\13\26\3\26\3\26")
        buf.write("\3\26\3\26\7\26\u00a2\n\26\f\26\16\26\u00a5\13\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u00bb\n")
        buf.write("\26\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\35\3\36")
        buf.write("\3\36\3\36\3\36\3\37\3\37\3\37\3 \3 \3 \3 \3 \3 \3!\3")
        buf.write("!\3!\3!\3!\3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3")
        buf.write("#\3$\3$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3&\3&\3&\3&\7&\u010a")
        buf.write("\n&\f&\16&\u010d\13&\3&\3&\3&\3&\3&\7&\u0114\n&\f&\16")
        buf.write("&\u0117\13&\3&\5&\u011a\n&\3\'\3\'\7\'\u011e\n\'\f\'\16")
        buf.write("\'\u0121\13\'\3(\3(\3)\6)\u0126\n)\r)\16)\u0127\3*\6*")
        buf.write("\u012b\n*\r*\16*\u012c\3*\3*\6*\u0131\n*\r*\16*\u0132")
        buf.write("\3+\5+\u0136\n+\3+\3+\7+\u013a\n+\f+\16+\u013d\13+\3,")
        buf.write("\6,\u0140\n,\r,\16,\u0141\3,\3,\2\2-\3\3\5\4\7\5\t\6\13")
        buf.write("\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37")
        buf.write("\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34")
        buf.write("\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-\3\2\b\6\2")
        buf.write("\f\f\17\17$$^^\6\2\f\f\17\17))^^\5\2C\\aac|\6\2\62;C\\")
        buf.write("aac|\3\2\62;\4\2\13\13\"\"\2\u0153\2\3\3\2\2\2\2\5\3\2")
        buf.write("\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2")
        buf.write("\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2")
        buf.write("\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37")
        buf.write("\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2")
        buf.write("\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2")
        buf.write("\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2")
        buf.write("\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2")
        buf.write("\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2")
        buf.write("\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3")
        buf.write("\2\2\2\3Y\3\2\2\2\5[\3\2\2\2\7]\3\2\2\2\t_\3\2\2\2\13")
        buf.write("c\3\2\2\2\rf\3\2\2\2\17h\3\2\2\2\21j\3\2\2\2\23m\3\2\2")
        buf.write("\2\25p\3\2\2\2\27s\3\2\2\2\31v\3\2\2\2\33x\3\2\2\2\35")
        buf.write("z\3\2\2\2\37|\3\2\2\2!~\3\2\2\2#\u0082\3\2\2\2%\u0085")
        buf.write("\3\2\2\2\'\u0088\3\2\2\2)\u008b\3\2\2\2+\u008e\3\2\2\2")
        buf.write("-\u00bc\3\2\2\2/\u00c0\3\2\2\2\61\u00c3\3\2\2\2\63\u00c8")
        buf.write("\3\2\2\2\65\u00cd\3\2\2\2\67\u00cf\3\2\2\29\u00d5\3\2")
        buf.write("\2\2;\u00db\3\2\2\2=\u00df\3\2\2\2?\u00e2\3\2\2\2A\u00e8")
        buf.write("\3\2\2\2C\u00ef\3\2\2\2E\u00f5\3\2\2\2G\u00fa\3\2\2\2")
        buf.write("I\u0100\3\2\2\2K\u0119\3\2\2\2M\u011b\3\2\2\2O\u0122\3")
        buf.write("\2\2\2Q\u0125\3\2\2\2S\u012a\3\2\2\2U\u0135\3\2\2\2W\u013f")
        buf.write("\3\2\2\2YZ\7*\2\2Z\4\3\2\2\2[\\\7.\2\2\\\6\3\2\2\2]^\7")
        buf.write("+\2\2^\b\3\2\2\2_`\7c\2\2`a\7p\2\2ab\7f\2\2b\n\3\2\2\2")
        buf.write("cd\7q\2\2de\7t\2\2e\f\3\2\2\2fg\7@\2\2g\16\3\2\2\2hi\7")
        buf.write(">\2\2i\20\3\2\2\2jk\7?\2\2kl\7?\2\2l\22\3\2\2\2mn\7#\2")
        buf.write("\2no\7?\2\2o\24\3\2\2\2pq\7>\2\2qr\7?\2\2r\26\3\2\2\2")
        buf.write("st\7@\2\2tu\7?\2\2u\30\3\2\2\2vw\7-\2\2w\32\3\2\2\2xy")
        buf.write("\7/\2\2y\34\3\2\2\2z{\7,\2\2{\36\3\2\2\2|}\7\61\2\2} ")
        buf.write("\3\2\2\2~\177\7p\2\2\177\u0080\7q\2\2\u0080\u0081\7v\2")
        buf.write("\2\u0081\"\3\2\2\2\u0082\u0083\7/\2\2\u0083\u0084\7/\2")
        buf.write("\2\u0084$\3\2\2\2\u0085\u0086\7-\2\2\u0086\u0087\7-\2")
        buf.write("\2\u0087&\3\2\2\2\u0088\u0089\7-\2\2\u0089\u008a\7?\2")
        buf.write("\2\u008a(\3\2\2\2\u008b\u008c\7/\2\2\u008c\u008d\7?\2")
        buf.write("\2\u008d*\3\2\2\2\u008e\u008f\7a\2\2\u008f\u0090\7a\2")
        buf.write("\2\u0090\u0091\7p\2\2\u0091\u0092\7c\2\2\u0092\u0093\7")
        buf.write("o\2\2\u0093\u0094\7g\2\2\u0094\u0095\7a\2\2\u0095\u0096")
        buf.write("\7a\2\2\u0096\u009a\3\2\2\2\u0097\u0099\5W,\2\u0098\u0097")
        buf.write("\3\2\2\2\u0099\u009c\3\2\2\2\u009a\u0098\3\2\2\2\u009a")
        buf.write("\u009b\3\2\2\2\u009b\u009d\3\2\2\2\u009c\u009a\3\2\2\2")
        buf.write("\u009d\u009e\7?\2\2\u009e\u009f\7?\2\2\u009f\u00a3\3\2")
        buf.write("\2\2\u00a0\u00a2\5W,\2\u00a1\u00a0\3\2\2\2\u00a2\u00a5")
        buf.write("\3\2\2\2\u00a3\u00a1\3\2\2\2\u00a3\u00a4\3\2\2\2\u00a4")
        buf.write("\u00ba\3\2\2\2\u00a5\u00a3\3\2\2\2\u00a6\u00a7\7$\2\2")
        buf.write("\u00a7\u00a8\7a\2\2\u00a8\u00a9\7a\2\2\u00a9\u00aa\7o")
        buf.write("\2\2\u00aa\u00ab\7c\2\2\u00ab\u00ac\7k\2\2\u00ac\u00ad")
        buf.write("\7p\2\2\u00ad\u00ae\7a\2\2\u00ae\u00af\7a\2\2\u00af\u00bb")
        buf.write("\7$\2\2\u00b0\u00b1\7)\2\2\u00b1\u00b2\7a\2\2\u00b2\u00b3")
        buf.write("\7a\2\2\u00b3\u00b4\7o\2\2\u00b4\u00b5\7c\2\2\u00b5\u00b6")
        buf.write("\7k\2\2\u00b6\u00b7\7p\2\2\u00b7\u00b8\7a\2\2\u00b8\u00b9")
        buf.write("\7a\2\2\u00b9\u00bb\7)\2\2\u00ba\u00a6\3\2\2\2\u00ba\u00b0")
        buf.write("\3\2\2\2\u00bb,\3\2\2\2\u00bc\u00bd\7f\2\2\u00bd\u00be")
        buf.write("\7g\2\2\u00be\u00bf\7h\2\2\u00bf.\3\2\2\2\u00c0\u00c1")
        buf.write("\7k\2\2\u00c1\u00c2\7h\2\2\u00c2\60\3\2\2\2\u00c3\u00c4")
        buf.write("\7g\2\2\u00c4\u00c5\7n\2\2\u00c5\u00c6\7k\2\2\u00c6\u00c7")
        buf.write("\7h\2\2\u00c7\62\3\2\2\2\u00c8\u00c9\7g\2\2\u00c9\u00ca")
        buf.write("\7n\2\2\u00ca\u00cb\7u\2\2\u00cb\u00cc\7g\2\2\u00cc\64")
        buf.write("\3\2\2\2\u00cd\u00ce\7<\2\2\u00ce\66\3\2\2\2\u00cf\u00d0")
        buf.write("\7d\2\2\u00d0\u00d1\7t\2\2\u00d1\u00d2\7g\2\2\u00d2\u00d3")
        buf.write("\7c\2\2\u00d3\u00d4\7m\2\2\u00d48\3\2\2\2\u00d5\u00d6")
        buf.write("\7y\2\2\u00d6\u00d7\7j\2\2\u00d7\u00d8\7k\2\2\u00d8\u00d9")
        buf.write("\7n\2\2\u00d9\u00da\7g\2\2\u00da:\3\2\2\2\u00db\u00dc")
        buf.write("\7h\2\2\u00dc\u00dd\7q\2\2\u00dd\u00de\7t\2\2\u00de<\3")
        buf.write("\2\2\2\u00df\u00e0\7k\2\2\u00e0\u00e1\7p\2\2\u00e1>\3")
        buf.write("\2\2\2\u00e2\u00e3\7t\2\2\u00e3\u00e4\7c\2\2\u00e4\u00e5")
        buf.write("\7p\2\2\u00e5\u00e6\7i\2\2\u00e6\u00e7\7g\2\2\u00e7@\3")
        buf.write("\2\2\2\u00e8\u00e9\7t\2\2\u00e9\u00ea\7g\2\2\u00ea\u00eb")
        buf.write("\7v\2\2\u00eb\u00ec\7w\2\2\u00ec\u00ed\7t\2\2\u00ed\u00ee")
        buf.write("\7p\2\2\u00eeB\3\2\2\2\u00ef\u00f0\7r\2\2\u00f0\u00f1")
        buf.write("\7t\2\2\u00f1\u00f2\7k\2\2\u00f2\u00f3\7p\2\2\u00f3\u00f4")
        buf.write("\7v\2\2\u00f4D\3\2\2\2\u00f5\u00f6\7V\2\2\u00f6\u00f7")
        buf.write("\7t\2\2\u00f7\u00f8\7w\2\2\u00f8\u00f9\7g\2\2\u00f9F\3")
        buf.write("\2\2\2\u00fa\u00fb\7H\2\2\u00fb\u00fc\7c\2\2\u00fc\u00fd")
        buf.write("\7n\2\2\u00fd\u00fe\7u\2\2\u00fe\u00ff\7g\2\2\u00ffH\3")
        buf.write("\2\2\2\u0100\u0101\7P\2\2\u0101\u0102\7q\2\2\u0102\u0103")
        buf.write("\7p\2\2\u0103\u0104\7g\2\2\u0104J\3\2\2\2\u0105\u010b")
        buf.write("\7$\2\2\u0106\u010a\n\2\2\2\u0107\u0108\7^\2\2\u0108\u010a")
        buf.write("\13\2\2\2\u0109\u0106\3\2\2\2\u0109\u0107\3\2\2\2\u010a")
        buf.write("\u010d\3\2\2\2\u010b\u0109\3\2\2\2\u010b\u010c\3\2\2\2")
        buf.write("\u010c\u010e\3\2\2\2\u010d\u010b\3\2\2\2\u010e\u011a\7")
        buf.write("$\2\2\u010f\u0115\7)\2\2\u0110\u0114\n\3\2\2\u0111\u0112")
        buf.write("\7^\2\2\u0112\u0114\13\2\2\2\u0113\u0110\3\2\2\2\u0113")
        buf.write("\u0111\3\2\2\2\u0114\u0117\3\2\2\2\u0115\u0113\3\2\2\2")
        buf.write("\u0115\u0116\3\2\2\2\u0116\u0118\3\2\2\2\u0117\u0115\3")
        buf.write("\2\2\2\u0118\u011a\7)\2\2\u0119\u0105\3\2\2\2\u0119\u010f")
        buf.write("\3\2\2\2\u011aL\3\2\2\2\u011b\u011f\t\4\2\2\u011c\u011e")
        buf.write("\t\5\2\2\u011d\u011c\3\2\2\2\u011e\u0121\3\2\2\2\u011f")
        buf.write("\u011d\3\2\2\2\u011f\u0120\3\2\2\2\u0120N\3\2\2\2\u0121")
        buf.write("\u011f\3\2\2\2\u0122\u0123\7?\2\2\u0123P\3\2\2\2\u0124")
        buf.write("\u0126\t\6\2\2\u0125\u0124\3\2\2\2\u0126\u0127\3\2\2\2")
        buf.write("\u0127\u0125\3\2\2\2\u0127\u0128\3\2\2\2\u0128R\3\2\2")
        buf.write("\2\u0129\u012b\t\6\2\2\u012a\u0129\3\2\2\2\u012b\u012c")
        buf.write("\3\2\2\2\u012c\u012a\3\2\2\2\u012c\u012d\3\2\2\2\u012d")
        buf.write("\u012e\3\2\2\2\u012e\u0130\7\60\2\2\u012f\u0131\t\6\2")
        buf.write("\2\u0130\u012f\3\2\2\2\u0131\u0132\3\2\2\2\u0132\u0130")
        buf.write("\3\2\2\2\u0132\u0133\3\2\2\2\u0133T\3\2\2\2\u0134\u0136")
        buf.write("\7\17\2\2\u0135\u0134\3\2\2\2\u0135\u0136\3\2\2\2\u0136")
        buf.write("\u0137\3\2\2\2\u0137\u013b\7\f\2\2\u0138\u013a\t\7\2\2")
        buf.write("\u0139\u0138\3\2\2\2\u013a\u013d\3\2\2\2\u013b\u0139\3")
        buf.write("\2\2\2\u013b\u013c\3\2\2\2\u013cV\3\2\2\2\u013d\u013b")
        buf.write("\3\2\2\2\u013e\u0140\t\7\2\2\u013f\u013e\3\2\2\2\u0140")
        buf.write("\u0141\3\2\2\2\u0141\u013f\3\2\2\2\u0141\u0142\3\2\2\2")
        buf.write("\u0142\u0143\3\2\2\2\u0143\u0144\b,\2\2\u0144X\3\2\2\2")
        buf.write("\22\2\u009a\u00a3\u00ba\u0109\u010b\u0113\u0115\u0119")
        buf.write("\u011f\u0127\u012c\u0132\u0135\u013b\u0141\3\b\2\2")
        return buf.getvalue()


class py2javaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    MAIN = 21
    DEF = 22
    IF = 23
    ELIF = 24
    ELSE = 25
    COLON = 26
    BREAK = 27
    WHILE = 28
    FOR = 29
    IN = 30
    RANGE = 31
    RETURN = 32
    PRINT = 33
    TRUE = 34
    FALSE = 35
    NONE = 36
    STRING = 37
    ID = 38
    EQUAL = 39
    NUMBER = 40
    FLOAT = 41
    NL = 42
    WS = 43

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "','", "')'", "'and'", "'or'", "'>'", "'<'", "'=='", 
            "'!='", "'<='", "'>='", "'+'", "'-'", "'*'", "'/'", "'not'", 
            "'--'", "'++'", "'+='", "'-='", "'def'", "'if'", "'elif'", "'else'", 
            "':'", "'break'", "'while'", "'for'", "'in'", "'range'", "'return'", 
            "'print'", "'True'", "'False'", "'None'", "'='" ]

    symbolicNames = [ "<INVALID>",
            "MAIN", "DEF", "IF", "ELIF", "ELSE", "COLON", "BREAK", "WHILE", 
            "FOR", "IN", "RANGE", "RETURN", "PRINT", "TRUE", "FALSE", "NONE", 
            "STRING", "ID", "EQUAL", "NUMBER", "FLOAT", "NL", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "MAIN", "DEF", "IF", "ELIF", "ELSE", "COLON", "BREAK", 
                  "WHILE", "FOR", "IN", "RANGE", "RETURN", "PRINT", "TRUE", 
                  "FALSE", "NONE", "STRING", "ID", "EQUAL", "NUMBER", "FLOAT", 
                  "NL", "WS" ]

    grammarFileName = "py2java.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


