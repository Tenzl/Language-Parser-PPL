# Generated from proj.g4 by ANTLR 4.9.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\63")
        buf.write("\u0173\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\3\2\3\2\3\3\3")
        buf.write("\3\3\4\3\4\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\7\3\7\3\b\3\b")
        buf.write("\3\t\3\t\3\t\3\n\3\n\3\n\3\13\3\13\3\13\3\f\3\f\3\f\3")
        buf.write("\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3\21\3\21\3\21\3")
        buf.write("\21\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\30\3\30\3\30\3\31\3\31\3\31\3\32\3\32\3\32")
        buf.write("\3\33\3\33\3\33\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\7\34\u00c7\n\34\f\34\16\34\u00ca\13\34\3\34")
        buf.write("\3\34\3\34\3\34\7\34\u00d0\n\34\f\34\16\34\u00d3\13\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u00e9")
        buf.write("\n\34\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\37\3\37\3\37")
        buf.write("\3\37\3\37\3 \3 \3 \3 \3 \3!\3!\3\"\3\"\3\"\3\"\3\"\3")
        buf.write("\"\3#\3#\3#\3#\3#\3#\3$\3$\3$\3$\3%\3%\3%\3&\3&\3&\3&")
        buf.write("\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3")
        buf.write(")\3)\3)\3)\3)\3*\3*\3*\3*\3*\3*\3+\3+\3+\3+\3+\3,\3,\3")
        buf.write(",\3,\7,\u0138\n,\f,\16,\u013b\13,\3,\3,\3,\3,\3,\7,\u0142")
        buf.write("\n,\f,\16,\u0145\13,\3,\5,\u0148\n,\3-\3-\7-\u014c\n-")
        buf.write("\f-\16-\u014f\13-\3.\3.\3/\6/\u0154\n/\r/\16/\u0155\3")
        buf.write("\60\6\60\u0159\n\60\r\60\16\60\u015a\3\60\3\60\6\60\u015f")
        buf.write("\n\60\r\60\16\60\u0160\3\61\5\61\u0164\n\61\3\61\3\61")
        buf.write("\7\61\u0168\n\61\f\61\16\61\u016b\13\61\3\62\6\62\u016e")
        buf.write("\n\62\r\62\16\62\u016f\3\62\3\62\2\2\63\3\3\5\4\7\5\t")
        buf.write("\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20")
        buf.write("\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65")
        buf.write("\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60")
        buf.write("_\61a\62c\63\3\2\b\6\2\f\f\17\17$$^^\6\2\f\f\17\17))^")
        buf.write("^\5\2C\\aac|\6\2\62;C\\aac|\3\2\62;\4\2\13\13\"\"\2\u0181")
        buf.write("\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13")
        buf.write("\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3")
        buf.write("\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2")
        buf.write("\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2")
        buf.write("%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2")
        buf.write("\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67")
        buf.write("\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2")
        buf.write("A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2")
        buf.write("\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2")
        buf.write("\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2")
        buf.write("\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\3e\3\2\2\2\5g\3")
        buf.write("\2\2\2\7i\3\2\2\2\tk\3\2\2\2\13o\3\2\2\2\rr\3\2\2\2\17")
        buf.write("t\3\2\2\2\21v\3\2\2\2\23y\3\2\2\2\25|\3\2\2\2\27\177\3")
        buf.write("\2\2\2\31\u0082\3\2\2\2\33\u0084\3\2\2\2\35\u0086\3\2")
        buf.write("\2\2\37\u0088\3\2\2\2!\u008a\3\2\2\2#\u008e\3\2\2\2%\u0093")
        buf.write("\3\2\2\2\'\u0098\3\2\2\2)\u009d\3\2\2\2+\u00a6\3\2\2\2")
        buf.write("-\u00aa\3\2\2\2/\u00b0\3\2\2\2\61\u00b3\3\2\2\2\63\u00b6")
        buf.write("\3\2\2\2\65\u00b9\3\2\2\2\67\u00bc\3\2\2\29\u00ea\3\2")
        buf.write("\2\2;\u00ee\3\2\2\2=\u00f1\3\2\2\2?\u00f6\3\2\2\2A\u00fb")
        buf.write("\3\2\2\2C\u00fd\3\2\2\2E\u0103\3\2\2\2G\u0109\3\2\2\2")
        buf.write("I\u010d\3\2\2\2K\u0110\3\2\2\2M\u0116\3\2\2\2O\u011d\3")
        buf.write("\2\2\2Q\u0123\3\2\2\2S\u0128\3\2\2\2U\u012e\3\2\2\2W\u0147")
        buf.write("\3\2\2\2Y\u0149\3\2\2\2[\u0150\3\2\2\2]\u0153\3\2\2\2")
        buf.write("_\u0158\3\2\2\2a\u0163\3\2\2\2c\u016d\3\2\2\2ef\7*\2\2")
        buf.write("f\4\3\2\2\2gh\7.\2\2h\6\3\2\2\2ij\7+\2\2j\b\3\2\2\2kl")
        buf.write("\7c\2\2lm\7p\2\2mn\7f\2\2n\n\3\2\2\2op\7q\2\2pq\7t\2\2")
        buf.write("q\f\3\2\2\2rs\7@\2\2s\16\3\2\2\2tu\7>\2\2u\20\3\2\2\2")
        buf.write("vw\7?\2\2wx\7?\2\2x\22\3\2\2\2yz\7#\2\2z{\7?\2\2{\24\3")
        buf.write("\2\2\2|}\7>\2\2}~\7?\2\2~\26\3\2\2\2\177\u0080\7@\2\2")
        buf.write("\u0080\u0081\7?\2\2\u0081\30\3\2\2\2\u0082\u0083\7-\2")
        buf.write("\2\u0083\32\3\2\2\2\u0084\u0085\7/\2\2\u0085\34\3\2\2")
        buf.write("\2\u0086\u0087\7,\2\2\u0087\36\3\2\2\2\u0088\u0089\7\61")
        buf.write("\2\2\u0089 \3\2\2\2\u008a\u008b\7p\2\2\u008b\u008c\7q")
        buf.write("\2\2\u008c\u008d\7v\2\2\u008d\"\3\2\2\2\u008e\u008f\7")
        buf.write("u\2\2\u008f\u0090\7j\2\2\u0090\u0091\7q\2\2\u0091\u0092")
        buf.write("\7y\2\2\u0092$\3\2\2\2\u0093\u0094\7v\2\2\u0094\u0095")
        buf.write("\7g\2\2\u0095\u0096\7n\2\2\u0096\u0097\7n\2\2\u0097&\3")
        buf.write("\2\2\2\u0098\u0099\7u\2\2\u0099\u009a\7c\2\2\u009a\u009b")
        buf.write("\7x\2\2\u009b\u009c\7g\2\2\u009c(\3\2\2\2\u009d\u009e")
        buf.write("\7t\2\2\u009e\u009f\7g\2\2\u009f\u00a0\7v\2\2\u00a0\u00a1")
        buf.write("\7t\2\2\u00a1\u00a2\7k\2\2\u00a2\u00a3\7g\2\2\u00a3\u00a4")
        buf.write("\7x\2\2\u00a4\u00a5\7g\2\2\u00a5*\3\2\2\2\u00a6\u00a7")
        buf.write("\7i\2\2\u00a7\u00a8\7g\2\2\u00a8\u00a9\7v\2\2\u00a9,\3")
        buf.write("\2\2\2\u00aa\u00ab\7u\2\2\u00ab\u00ac\7v\2\2\u00ac\u00ad")
        buf.write("\7q\2\2\u00ad\u00ae\7t\2\2\u00ae\u00af\7g\2\2\u00af.\3")
        buf.write("\2\2\2\u00b0\u00b1\7/\2\2\u00b1\u00b2\7/\2\2\u00b2\60")
        buf.write("\3\2\2\2\u00b3\u00b4\7-\2\2\u00b4\u00b5\7-\2\2\u00b5\62")
        buf.write("\3\2\2\2\u00b6\u00b7\7-\2\2\u00b7\u00b8\7?\2\2\u00b8\64")
        buf.write("\3\2\2\2\u00b9\u00ba\7/\2\2\u00ba\u00bb\7?\2\2\u00bb\66")
        buf.write("\3\2\2\2\u00bc\u00bd\7a\2\2\u00bd\u00be\7a\2\2\u00be\u00bf")
        buf.write("\7p\2\2\u00bf\u00c0\7c\2\2\u00c0\u00c1\7o\2\2\u00c1\u00c2")
        buf.write("\7g\2\2\u00c2\u00c3\7a\2\2\u00c3\u00c4\7a\2\2\u00c4\u00c8")
        buf.write("\3\2\2\2\u00c5\u00c7\5c\62\2\u00c6\u00c5\3\2\2\2\u00c7")
        buf.write("\u00ca\3\2\2\2\u00c8\u00c6\3\2\2\2\u00c8\u00c9\3\2\2\2")
        buf.write("\u00c9\u00cb\3\2\2\2\u00ca\u00c8\3\2\2\2\u00cb\u00cc\7")
        buf.write("?\2\2\u00cc\u00cd\7?\2\2\u00cd\u00d1\3\2\2\2\u00ce\u00d0")
        buf.write("\5c\62\2\u00cf\u00ce\3\2\2\2\u00d0\u00d3\3\2\2\2\u00d1")
        buf.write("\u00cf\3\2\2\2\u00d1\u00d2\3\2\2\2\u00d2\u00e8\3\2\2\2")
        buf.write("\u00d3\u00d1\3\2\2\2\u00d4\u00d5\7$\2\2\u00d5\u00d6\7")
        buf.write("a\2\2\u00d6\u00d7\7a\2\2\u00d7\u00d8\7o\2\2\u00d8\u00d9")
        buf.write("\7c\2\2\u00d9\u00da\7k\2\2\u00da\u00db\7p\2\2\u00db\u00dc")
        buf.write("\7a\2\2\u00dc\u00dd\7a\2\2\u00dd\u00e9\7$\2\2\u00de\u00df")
        buf.write("\7)\2\2\u00df\u00e0\7a\2\2\u00e0\u00e1\7a\2\2\u00e1\u00e2")
        buf.write("\7o\2\2\u00e2\u00e3\7c\2\2\u00e3\u00e4\7k\2\2\u00e4\u00e5")
        buf.write("\7p\2\2\u00e5\u00e6\7a\2\2\u00e6\u00e7\7a\2\2\u00e7\u00e9")
        buf.write("\7)\2\2\u00e8\u00d4\3\2\2\2\u00e8\u00de\3\2\2\2\u00e9")
        buf.write("8\3\2\2\2\u00ea\u00eb\7f\2\2\u00eb\u00ec\7g\2\2\u00ec")
        buf.write("\u00ed\7h\2\2\u00ed:\3\2\2\2\u00ee\u00ef\7k\2\2\u00ef")
        buf.write("\u00f0\7h\2\2\u00f0<\3\2\2\2\u00f1\u00f2\7g\2\2\u00f2")
        buf.write("\u00f3\7n\2\2\u00f3\u00f4\7k\2\2\u00f4\u00f5\7h\2\2\u00f5")
        buf.write(">\3\2\2\2\u00f6\u00f7\7g\2\2\u00f7\u00f8\7n\2\2\u00f8")
        buf.write("\u00f9\7u\2\2\u00f9\u00fa\7g\2\2\u00fa@\3\2\2\2\u00fb")
        buf.write("\u00fc\7<\2\2\u00fcB\3\2\2\2\u00fd\u00fe\7d\2\2\u00fe")
        buf.write("\u00ff\7t\2\2\u00ff\u0100\7g\2\2\u0100\u0101\7c\2\2\u0101")
        buf.write("\u0102\7m\2\2\u0102D\3\2\2\2\u0103\u0104\7y\2\2\u0104")
        buf.write("\u0105\7j\2\2\u0105\u0106\7k\2\2\u0106\u0107\7n\2\2\u0107")
        buf.write("\u0108\7g\2\2\u0108F\3\2\2\2\u0109\u010a\7h\2\2\u010a")
        buf.write("\u010b\7q\2\2\u010b\u010c\7t\2\2\u010cH\3\2\2\2\u010d")
        buf.write("\u010e\7k\2\2\u010e\u010f\7p\2\2\u010fJ\3\2\2\2\u0110")
        buf.write("\u0111\7t\2\2\u0111\u0112\7c\2\2\u0112\u0113\7p\2\2\u0113")
        buf.write("\u0114\7i\2\2\u0114\u0115\7g\2\2\u0115L\3\2\2\2\u0116")
        buf.write("\u0117\7t\2\2\u0117\u0118\7g\2\2\u0118\u0119\7v\2\2\u0119")
        buf.write("\u011a\7w\2\2\u011a\u011b\7t\2\2\u011b\u011c\7p\2\2\u011c")
        buf.write("N\3\2\2\2\u011d\u011e\7r\2\2\u011e\u011f\7t\2\2\u011f")
        buf.write("\u0120\7k\2\2\u0120\u0121\7p\2\2\u0121\u0122\7v\2\2\u0122")
        buf.write("P\3\2\2\2\u0123\u0124\7V\2\2\u0124\u0125\7t\2\2\u0125")
        buf.write("\u0126\7w\2\2\u0126\u0127\7g\2\2\u0127R\3\2\2\2\u0128")
        buf.write("\u0129\7H\2\2\u0129\u012a\7c\2\2\u012a\u012b\7n\2\2\u012b")
        buf.write("\u012c\7u\2\2\u012c\u012d\7g\2\2\u012dT\3\2\2\2\u012e")
        buf.write("\u012f\7P\2\2\u012f\u0130\7q\2\2\u0130\u0131\7p\2\2\u0131")
        buf.write("\u0132\7g\2\2\u0132V\3\2\2\2\u0133\u0139\7$\2\2\u0134")
        buf.write("\u0138\n\2\2\2\u0135\u0136\7^\2\2\u0136\u0138\13\2\2\2")
        buf.write("\u0137\u0134\3\2\2\2\u0137\u0135\3\2\2\2\u0138\u013b\3")
        buf.write("\2\2\2\u0139\u0137\3\2\2\2\u0139\u013a\3\2\2\2\u013a\u013c")
        buf.write("\3\2\2\2\u013b\u0139\3\2\2\2\u013c\u0148\7$\2\2\u013d")
        buf.write("\u0143\7)\2\2\u013e\u0142\n\3\2\2\u013f\u0140\7^\2\2\u0140")
        buf.write("\u0142\13\2\2\2\u0141\u013e\3\2\2\2\u0141\u013f\3\2\2")
        buf.write("\2\u0142\u0145\3\2\2\2\u0143\u0141\3\2\2\2\u0143\u0144")
        buf.write("\3\2\2\2\u0144\u0146\3\2\2\2\u0145\u0143\3\2\2\2\u0146")
        buf.write("\u0148\7)\2\2\u0147\u0133\3\2\2\2\u0147\u013d\3\2\2\2")
        buf.write("\u0148X\3\2\2\2\u0149\u014d\t\4\2\2\u014a\u014c\t\5\2")
        buf.write("\2\u014b\u014a\3\2\2\2\u014c\u014f\3\2\2\2\u014d\u014b")
        buf.write("\3\2\2\2\u014d\u014e\3\2\2\2\u014eZ\3\2\2\2\u014f\u014d")
        buf.write("\3\2\2\2\u0150\u0151\7?\2\2\u0151\\\3\2\2\2\u0152\u0154")
        buf.write("\t\6\2\2\u0153\u0152\3\2\2\2\u0154\u0155\3\2\2\2\u0155")
        buf.write("\u0153\3\2\2\2\u0155\u0156\3\2\2\2\u0156^\3\2\2\2\u0157")
        buf.write("\u0159\t\6\2\2\u0158\u0157\3\2\2\2\u0159\u015a\3\2\2\2")
        buf.write("\u015a\u0158\3\2\2\2\u015a\u015b\3\2\2\2\u015b\u015c\3")
        buf.write("\2\2\2\u015c\u015e\7\60\2\2\u015d\u015f\t\6\2\2\u015e")
        buf.write("\u015d\3\2\2\2\u015f\u0160\3\2\2\2\u0160\u015e\3\2\2\2")
        buf.write("\u0160\u0161\3\2\2\2\u0161`\3\2\2\2\u0162\u0164\7\17\2")
        buf.write("\2\u0163\u0162\3\2\2\2\u0163\u0164\3\2\2\2\u0164\u0165")
        buf.write("\3\2\2\2\u0165\u0169\7\f\2\2\u0166\u0168\t\7\2\2\u0167")
        buf.write("\u0166\3\2\2\2\u0168\u016b\3\2\2\2\u0169\u0167\3\2\2\2")
        buf.write("\u0169\u016a\3\2\2\2\u016ab\3\2\2\2\u016b\u0169\3\2\2")
        buf.write("\2\u016c\u016e\t\7\2\2\u016d\u016c\3\2\2\2\u016e\u016f")
        buf.write("\3\2\2\2\u016f\u016d\3\2\2\2\u016f\u0170\3\2\2\2\u0170")
        buf.write("\u0171\3\2\2\2\u0171\u0172\b\62\2\2\u0172d\3\2\2\2\22")
        buf.write("\2\u00c8\u00d1\u00e8\u0137\u0139\u0141\u0143\u0147\u014d")
        buf.write("\u0155\u015a\u0160\u0163\u0169\u016f\3\b\2\2")
        return buf.getvalue()


class projLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    MAIN = 27
    DEF = 28
    IF = 29
    ELIF = 30
    ELSE = 31
    COLON = 32
    BREAK = 33
    WHILE = 34
    FOR = 35
    IN = 36
    RANGE = 37
    RETURN = 38
    PRINT = 39
    TRUE = 40
    FALSE = 41
    NONE = 42
    STRING = 43
    ID = 44
    EQUAL = 45
    NUMBER = 46
    FLOAT = 47
    NL = 48
    WS = 49

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "','", "')'", "'and'", "'or'", "'>'", "'<'", "'=='", 
            "'!='", "'<='", "'>='", "'+'", "'-'", "'*'", "'/'", "'not'", 
            "'show'", "'tell'", "'save'", "'retrieve'", "'get'", "'store'", 
            "'--'", "'++'", "'+='", "'-='", "'def'", "'if'", "'elif'", "'else'", 
            "':'", "'break'", "'while'", "'for'", "'in'", "'range'", "'return'", 
            "'print'", "'True'", "'False'", "'None'", "'='" ]

    symbolicNames = [ "<INVALID>",
            "MAIN", "DEF", "IF", "ELIF", "ELSE", "COLON", "BREAK", "WHILE", 
            "FOR", "IN", "RANGE", "RETURN", "PRINT", "TRUE", "FALSE", "NONE", 
            "STRING", "ID", "EQUAL", "NUMBER", "FLOAT", "NL", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "MAIN", "DEF", "IF", "ELIF", "ELSE", "COLON", "BREAK", 
                  "WHILE", "FOR", "IN", "RANGE", "RETURN", "PRINT", "TRUE", 
                  "FALSE", "NONE", "STRING", "ID", "EQUAL", "NUMBER", "FLOAT", 
                  "NL", "WS" ]

    grammarFileName = "proj.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


